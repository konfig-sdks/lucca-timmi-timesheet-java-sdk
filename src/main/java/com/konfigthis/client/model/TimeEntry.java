/*
 * Timmi Timesheet API
 * Welcome on the documentation for the Timmi Timesheet API. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AxisSection;
import com.konfigthis.client.model.TimeEntryComment;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TimeEntries are the working time sequences spent by a user on any given day.  These ressources are exposed in the &#x60;/api/v3/timeentries&#x60; endpoint.  TimeEntries come in different **units** and **submission modes**.  ## About units &amp; duration  Timmi Timesheet supports up to 3 different units when it comes to entering TimeEntries. These are: - &#x60;0: Days&#x60; In this case, the user does not enter the exact hours he/she started working, but rather the total duration spent as a fraction of a day. For example: \&quot;John worked half a day on Monday\&quot;. - &#x60;1: Hours&#x60; In this case, the user still does not enter the exact hours, but only the duration spent in hours. For example: \&quot;John worked 7h30min yesterday\&quot;. - &#x60;2: Time&#x60; In this unit, the user has to enter the actual time he/she started working, as well as the end time. For example: \&quot;John started working at 08:00 for 3 hours, thus ending at 11:00\&quot;.  &#x60;&#x60;&#x60;csharp enum TimeEntryUnit: {     Days &#x3D; 0,     Hours &#x3D; 1,     Time &#x3D; 2 } &#x60;&#x60;&#x60;  Whichever the unit, the TimeEntry is mainly determined by three properties: - &#x60;(int) ownerId&#x60;: The user it belongs to. - &#x60;(date-time) startsAt&#x60;: The date and time when the user started working. In &#x60;Days&#x60; and &#x60;Hours&#x60; units, the time part can only be &#x60;00:00:00&#x60; for \&quot;morning\&quot; (AM) or &#x60;12:00:00&#x60; for the \&quot;afternoon\&quot; (PM). - &#x60;(duration) duration&#x60;: The total time spent by the user from the time he/she started. In all units, this property is serialized as a string compliant with the Timespan formating: &#x60;d.hh:mm:ss&#x60; where &#x60;d&#x60; is the number of days (can be omitted if equal to zero which is in most cases), &#x60;hh&#x60; the number of hours, &#x60;mm&#x60; the number of minutes, and &#x60;ss&#x60; the number of seconds.  &lt;!-- theme: warning --&gt; &gt; #### StartsAt and timezones &gt; The &#x60;startsAt&#x60; date-time property must be considered a [floating](https://www.w3.org/International/wiki/FloatingTime) date-time. As such, no UTC offset should be sent when creating or editing a TimeEntry.  &lt;!-- theme: warning --&gt; &gt; #### Max duration &gt; A TimeEntry cannot have a duration longer than 24h00 (ie one full day).   Some examples : &#x60;&#x60;&#x60;js // TIME UNIT // Case: \&quot;John (id: 416) worked between 09:45 and 12:15 on January, 1st 2021.\&quot; var timeEntry &#x3D; {   \&quot;ownerId\&quot;: 416,   \&quot;startsAt\&quot;: \&quot;2021-01-01 09:45:00\&quot;,   \&quot;duration: \&quot;02:30:00\&quot;,   \&quot;unit\&quot;: 2 };  // HOURS UNIT // Case: \&quot;John (id: 416) spent 4h45min working on January, 1st 2021 in the morning\&quot; var timeEntry &#x3D; {   \&quot;ownerId\&quot;: 416,   \&quot;startsAt\&quot;: \&quot;2021-01-01 00:00:00\&quot;,   \&quot;duration: \&quot;04:45:00\&quot;,   \&quot;unit\&quot;: 1 }  // DAYS UNIT // Case: \&quot;John (id: 416) worked on the afternoon of January, 1st 2021\&quot; var timeEntry &#x3D; {   \&quot;ownerId\&quot;: 416,   \&quot;startsAt\&quot;: \&quot;2021-01-01 12:00:00\&quot;,   \&quot;duration: \&quot;12:00:00\&quot;,   \&quot;unit\&quot;: 0 } &#x60;&#x60;&#x60;  ## About submission modes  There are 2 submission modes in Timmi Timesheet: - **Attendance**: the user is expected to enter the sequences of work without much detail. - **Activities**: the user is expected to enter the time spent on each task / project / whatever.  Therefore, TimeEntries in activities mode have a supplementary property: the set of task / project / cost center / ... the user worked on. These analytical items are called AxisSections. [More info here](docs/General/Resources/010.AxisSection.md).   &#x60;&#x60;&#x60;json {   \&quot;ownerId\&quot;: 416,   \&quot;startsAt\&quot;: \&quot;2021-01-01 00:00:00\&quot;,   \&quot;duration: \&quot;04:45:00\&quot;,   \&quot;unit\&quot;: 1,   \&quot;axisSections\&quot;: [     {       \&quot;name\&quot;: \&quot;R&amp;D\&quot;,       \&quot;axis\&quot;: {         \&quot;name\&quot;: \&quot;Cost centers\&quot;       }     },     {       \&quot;name\&quot;: \&quot;My awesome project\&quot;,       \&quot;axis\&quot;: {         \&quot;name\&quot;: \&quot;Projects\&quot;       }     },     {       \&quot;name\&quot;: \&quot;Testing\&quot;,       \&quot;axis\&quot;: {         \&quot;name\&quot;: \&quot;Tasks\&quot;       }     }   ] } &#x60;&#x60;&#x60;  ## About time types Each time-entry can reference a time type via its &#x60;timeTypeId&#x60; property.  Time types are a configured working time classification. It is generally used as a way of discriminating different types of working hours regarding compensation: - Attendance - Travels - etc...  Time types can only be used on users that belong to a specific regulation (ie time and attendance policy) mode: &#x60;timeTrackingMode: typed&#x60;. Whenever it is not the case, the &#x60;timeTypeId&#x60; property should be left &#x60;null&#x60;.  ## Fields
 */
@ApiModel(description = "TimeEntries are the working time sequences spent by a user on any given day.  These ressources are exposed in the `/api/v3/timeentries` endpoint.  TimeEntries come in different **units** and **submission modes**.  ## About units & duration  Timmi Timesheet supports up to 3 different units when it comes to entering TimeEntries. These are: - `0: Days` In this case, the user does not enter the exact hours he/she started working, but rather the total duration spent as a fraction of a day. For example: \"John worked half a day on Monday\". - `1: Hours` In this case, the user still does not enter the exact hours, but only the duration spent in hours. For example: \"John worked 7h30min yesterday\". - `2: Time` In this unit, the user has to enter the actual time he/she started working, as well as the end time. For example: \"John started working at 08:00 for 3 hours, thus ending at 11:00\".  ```csharp enum TimeEntryUnit: {     Days = 0,     Hours = 1,     Time = 2 } ```  Whichever the unit, the TimeEntry is mainly determined by three properties: - `(int) ownerId`: The user it belongs to. - `(date-time) startsAt`: The date and time when the user started working. In `Days` and `Hours` units, the time part can only be `00:00:00` for \"morning\" (AM) or `12:00:00` for the \"afternoon\" (PM). - `(duration) duration`: The total time spent by the user from the time he/she started. In all units, this property is serialized as a string compliant with the Timespan formating: `d.hh:mm:ss` where `d` is the number of days (can be omitted if equal to zero which is in most cases), `hh` the number of hours, `mm` the number of minutes, and `ss` the number of seconds.  <!-- theme: warning --> > #### StartsAt and timezones > The `startsAt` date-time property must be considered a [floating](https://www.w3.org/International/wiki/FloatingTime) date-time. As such, no UTC offset should be sent when creating or editing a TimeEntry.  <!-- theme: warning --> > #### Max duration > A TimeEntry cannot have a duration longer than 24h00 (ie one full day).   Some examples : ```js // TIME UNIT // Case: \"John (id: 416) worked between 09:45 and 12:15 on January, 1st 2021.\" var timeEntry = {   \"ownerId\": 416,   \"startsAt\": \"2021-01-01 09:45:00\",   \"duration: \"02:30:00\",   \"unit\": 2 };  // HOURS UNIT // Case: \"John (id: 416) spent 4h45min working on January, 1st 2021 in the morning\" var timeEntry = {   \"ownerId\": 416,   \"startsAt\": \"2021-01-01 00:00:00\",   \"duration: \"04:45:00\",   \"unit\": 1 }  // DAYS UNIT // Case: \"John (id: 416) worked on the afternoon of January, 1st 2021\" var timeEntry = {   \"ownerId\": 416,   \"startsAt\": \"2021-01-01 12:00:00\",   \"duration: \"12:00:00\",   \"unit\": 0 } ```  ## About submission modes  There are 2 submission modes in Timmi Timesheet: - **Attendance**: the user is expected to enter the sequences of work without much detail. - **Activities**: the user is expected to enter the time spent on each task / project / whatever.  Therefore, TimeEntries in activities mode have a supplementary property: the set of task / project / cost center / ... the user worked on. These analytical items are called AxisSections. [More info here](docs/General/Resources/010.AxisSection.md).   ```json {   \"ownerId\": 416,   \"startsAt\": \"2021-01-01 00:00:00\",   \"duration: \"04:45:00\",   \"unit\": 1,   \"axisSections\": [     {       \"name\": \"R&D\",       \"axis\": {         \"name\": \"Cost centers\"       }     },     {       \"name\": \"My awesome project\",       \"axis\": {         \"name\": \"Projects\"       }     },     {       \"name\": \"Testing\",       \"axis\": {         \"name\": \"Tasks\"       }     }   ] } ```  ## About time types Each time-entry can reference a time type via its `timeTypeId` property.  Time types are a configured working time classification. It is generally used as a way of discriminating different types of working hours regarding compensation: - Attendance - Travels - etc...  Time types can only be used on users that belong to a specific regulation (ie time and attendance policy) mode: `timeTrackingMode: typed`. Whenever it is not the case, the `timeTypeId` property should be left `null`.  ## Fields")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimeEntry {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_STARTS_AT = "startsAt";
  @SerializedName(SERIALIZED_NAME_STARTS_AT)
  private OffsetDateTime startsAt;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration = "00:00:00";

  /**
   * 0: Days (eg \&quot;1/2 day\&quot;). 1: Hours (eg \&quot;8h15min\&quot;). 2: Time (eg \&quot;23:45:00\&quot;).
   */
  @JsonAdapter(UnitEnum.Adapter.class)
 public enum UnitEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    UnitEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitEnum fromValue(Integer value) {
      for (UnitEnum b : UnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return UnitEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private UnitEnum unit;

  public static final String SERIALIZED_NAME_ENDS_AT = "endsAt";
  @SerializedName(SERIALIZED_NAME_ENDS_AT)
  private OffsetDateTime endsAt;

  public static final String SERIALIZED_NAME_OWNER_ID = "ownerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private Integer ownerId;

  public static final String SERIALIZED_NAME_AUTHOR_ID = "authorId";
  @SerializedName(SERIALIZED_NAME_AUTHOR_ID)
  private Integer authorId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  /**
   * 0: Fallback on theoretical TimeEntries. 1: Application of bookmarked week. 2: Manual creation. 3: Import
   */
  @JsonAdapter(CreationSourceEnum.Adapter.class)
 public enum CreationSourceEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    CreationSourceEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreationSourceEnum fromValue(Integer value) {
      for (CreationSourceEnum b : CreationSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreationSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreationSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreationSourceEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return CreationSourceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CREATION_SOURCE = "creationSource";
  @SerializedName(SERIALIZED_NAME_CREATION_SOURCE)
  private CreationSourceEnum creationSource = CreationSourceEnum.NUMBER_2;

  public static final String SERIALIZED_NAME_MODIFIER_ID = "modifierId";
  @SerializedName(SERIALIZED_NAME_MODIFIER_ID)
  private Integer modifierId;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private Integer modifiedAt;

  public static final String SERIALIZED_NAME_LAYER = "layer";
  @SerializedName(SERIALIZED_NAME_LAYER)
  private Integer layer;

  public static final String SERIALIZED_NAME_AXIS_SECTIONS = "axisSections";
  @SerializedName(SERIALIZED_NAME_AXIS_SECTIONS)
  private List<AxisSection> axisSections = null;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private TimeEntryComment comment;

  public static final String SERIALIZED_NAME_TIME_TYPE_ID = "timeTypeId";
  @SerializedName(SERIALIZED_NAME_TIME_TYPE_ID)
  private Object timeTypeId = null;

  public TimeEntry() {
  }

  
  public TimeEntry(
     Integer id, 
     OffsetDateTime endsAt, 
     Integer authorId, 
     OffsetDateTime createdAt, 
     Integer modifierId, 
     Integer modifiedAt, 
     Integer layer
  ) {
    this();
    this.id = id;
    this.endsAt = endsAt;
    this.authorId = authorId;
    this.createdAt = createdAt;
    this.modifierId = modifierId;
    this.modifiedAt = modifiedAt;
    this.layer = layer;
  }

   /**
   * Unique identifier for this object.
   * minimum: 1
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for this object.")

  public Integer getId() {
    return id;
  }




  public TimeEntry startsAt(OffsetDateTime startsAt) {
    
    
    
    
    this.startsAt = startsAt;
    return this;
  }

   /**
   * The timeEntry start date and time. Please do NOT send any offset/timezone information (\&quot;Z\&quot;, \&quot;+01:00\&quot;, etc...).
   * @return startsAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The timeEntry start date and time. Please do NOT send any offset/timezone information (\"Z\", \"+01:00\", etc...).")

  public OffsetDateTime getStartsAt() {
    return startsAt;
  }


  public void setStartsAt(OffsetDateTime startsAt) {
    
    
    
    this.startsAt = startsAt;
  }


  public TimeEntry duration(String duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

   /**
   * Format: d.hh:mm:ss. Max: \&quot;1.00:00:00\&quot; (ie 24 hours).
   * @return duration
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "03:45:00", required = true, value = "Format: d.hh:mm:ss. Max: \"1.00:00:00\" (ie 24 hours).")

  public String getDuration() {
    return duration;
  }


  public void setDuration(String duration) {
    
    
    
    this.duration = duration;
  }


  public TimeEntry unit(UnitEnum unit) {
    
    
    
    
    this.unit = unit;
    return this;
  }

   /**
   * 0: Days (eg \&quot;1/2 day\&quot;). 1: Hours (eg \&quot;8h15min\&quot;). 2: Time (eg \&quot;23:45:00\&quot;).
   * @return unit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "_0", required = true, value = "0: Days (eg \"1/2 day\"). 1: Hours (eg \"8h15min\"). 2: Time (eg \"23:45:00\").")

  public UnitEnum getUnit() {
    return unit;
  }


  public void setUnit(UnitEnum unit) {
    
    
    
    this.unit = unit;
  }


   /**
   * Get endsAt
   * @return endsAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getEndsAt() {
    return endsAt;
  }




  public TimeEntry ownerId(Integer ownerId) {
    if (ownerId != null && ownerId < 1) {
      throw new IllegalArgumentException("Invalid value for ownerId. Must be greater than or equal to 1.");
    }
    
    
    
    this.ownerId = ownerId;
    return this;
  }

   /**
   * The user&#39;s unique identifier.
   * minimum: 1
   * @return ownerId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The user's unique identifier.")

  public Integer getOwnerId() {
    return ownerId;
  }


  public void setOwnerId(Integer ownerId) {
    if (ownerId != null && ownerId < 1) {
      throw new IllegalArgumentException("Invalid value for ownerId. Must be greater than or equal to 1.");
    }
    
    
    this.ownerId = ownerId;
  }


   /**
   * Identifier of the user who initially created this TimeEntry.
   * @return authorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifier of the user who initially created this TimeEntry.")

  public Integer getAuthorId() {
    return authorId;
  }




   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }




  public TimeEntry creationSource(CreationSourceEnum creationSource) {
    
    
    
    
    this.creationSource = creationSource;
    return this;
  }

   /**
   * 0: Fallback on theoretical TimeEntries. 1: Application of bookmarked week. 2: Manual creation. 3: Import
   * @return creationSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_2", value = "0: Fallback on theoretical TimeEntries. 1: Application of bookmarked week. 2: Manual creation. 3: Import")

  public CreationSourceEnum getCreationSource() {
    return creationSource;
  }


  public void setCreationSource(CreationSourceEnum creationSource) {
    
    
    
    this.creationSource = creationSource;
  }


   /**
   * The unique identifier of the user who last updated the TimeEntry.
   * @return modifierId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique identifier of the user who last updated the TimeEntry.")

  public Integer getModifierId() {
    return modifierId;
  }




   /**
   * Date and time when TimeEntry was last modified.
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time when TimeEntry was last modified.")

  public Integer getModifiedAt() {
    return modifiedAt;
  }




   /**
   * 0: Actual. 1: Theoretical
   * @return layer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "0: Actual. 1: Theoretical")

  public Integer getLayer() {
    return layer;
  }




  public TimeEntry axisSections(List<AxisSection> axisSections) {
    
    
    
    
    this.axisSections = axisSections;
    return this;
  }

  public TimeEntry addAxisSectionsItem(AxisSection axisSectionsItem) {
    if (this.axisSections == null) {
      this.axisSections = new ArrayList<>();
    }
    this.axisSections.add(axisSectionsItem);
    return this;
  }

   /**
   * When not in activity mode, send an empty array, or do not serialize this property.
   * @return axisSections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When not in activity mode, send an empty array, or do not serialize this property.")

  public List<AxisSection> getAxisSections() {
    return axisSections;
  }


  public void setAxisSections(List<AxisSection> axisSections) {
    
    
    
    this.axisSections = axisSections;
  }


  public TimeEntry comment(TimeEntryComment comment) {
    
    
    
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimeEntryComment getComment() {
    return comment;
  }


  public void setComment(TimeEntryComment comment) {
    
    
    
    this.comment = comment;
  }


  public TimeEntry timeTypeId(Object timeTypeId) {
    
    
    
    
    this.timeTypeId = timeTypeId;
    return this;
  }

   /**
   * Get timeTypeId
   * @return timeTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getTimeTypeId() {
    return timeTypeId;
  }


  public void setTimeTypeId(Object timeTypeId) {
    
    
    
    this.timeTypeId = timeTypeId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimeEntry instance itself
   */
  public TimeEntry putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeEntry timeEntry = (TimeEntry) o;
    return Objects.equals(this.id, timeEntry.id) &&
        Objects.equals(this.startsAt, timeEntry.startsAt) &&
        Objects.equals(this.duration, timeEntry.duration) &&
        Objects.equals(this.unit, timeEntry.unit) &&
        Objects.equals(this.endsAt, timeEntry.endsAt) &&
        Objects.equals(this.ownerId, timeEntry.ownerId) &&
        Objects.equals(this.authorId, timeEntry.authorId) &&
        Objects.equals(this.createdAt, timeEntry.createdAt) &&
        Objects.equals(this.creationSource, timeEntry.creationSource) &&
        Objects.equals(this.modifierId, timeEntry.modifierId) &&
        Objects.equals(this.modifiedAt, timeEntry.modifiedAt) &&
        Objects.equals(this.layer, timeEntry.layer) &&
        Objects.equals(this.axisSections, timeEntry.axisSections) &&
        Objects.equals(this.comment, timeEntry.comment) &&
        Objects.equals(this.timeTypeId, timeEntry.timeTypeId)&&
        Objects.equals(this.additionalProperties, timeEntry.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, startsAt, duration, unit, endsAt, ownerId, authorId, createdAt, creationSource, modifierId, modifiedAt, layer, axisSections, comment, timeTypeId, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeEntry {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    startsAt: ").append(toIndentedString(startsAt)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    endsAt: ").append(toIndentedString(endsAt)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    authorId: ").append(toIndentedString(authorId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    creationSource: ").append(toIndentedString(creationSource)).append("\n");
    sb.append("    modifierId: ").append(toIndentedString(modifierId)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    layer: ").append(toIndentedString(layer)).append("\n");
    sb.append("    axisSections: ").append(toIndentedString(axisSections)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    timeTypeId: ").append(toIndentedString(timeTypeId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("startsAt");
    openapiFields.add("duration");
    openapiFields.add("unit");
    openapiFields.add("endsAt");
    openapiFields.add("ownerId");
    openapiFields.add("authorId");
    openapiFields.add("createdAt");
    openapiFields.add("creationSource");
    openapiFields.add("modifierId");
    openapiFields.add("modifiedAt");
    openapiFields.add("layer");
    openapiFields.add("axisSections");
    openapiFields.add("comment");
    openapiFields.add("timeTypeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("startsAt");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("unit");
    openapiRequiredFields.add("ownerId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimeEntry
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimeEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeEntry is not found in the empty JSON string", TimeEntry.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TimeEntry.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if (jsonObj.get("axisSections") != null && !jsonObj.get("axisSections").isJsonNull()) {
        JsonArray jsonArrayaxisSections = jsonObj.getAsJsonArray("axisSections");
        if (jsonArrayaxisSections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("axisSections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `axisSections` to be an array in the JSON string but got `%s`", jsonObj.get("axisSections").toString()));
          }

          // validate the optional field `axisSections` (array)
          for (int i = 0; i < jsonArrayaxisSections.size(); i++) {
            AxisSection.validateJsonObject(jsonArrayaxisSections.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `comment`
      if (jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) {
        TimeEntryComment.validateJsonObject(jsonObj.getAsJsonObject("comment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeEntry>() {
           @Override
           public void write(JsonWriter out, TimeEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeEntry read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimeEntry instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeEntry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeEntry
  * @throws IOException if the JSON string is invalid with respect to TimeEntry
  */
  public static TimeEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeEntry.class);
  }

 /**
  * Convert an instance of TimeEntry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

