/*
 * Timmi Timesheet API
 * Welcome on the documentation for the Timmi Timesheet API. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AxisSection;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.TimeEntriesCreateMultipleResponse;
import com.konfigthis.client.model.TimeEntriesDeleteMultipleRequestInner;
import com.konfigthis.client.model.TimeEntriesGetByIdResponse;
import com.konfigthis.client.model.TimeEntriesListTimeEntriesResponse;
import com.konfigthis.client.model.TimeEntriesUpdateByIdResponse;
import com.konfigthis.client.model.TimeEntriesUpdateMultipleResponse;
import com.konfigthis.client.model.TimeEntry;
import com.konfigthis.client.model.TimeEntryComment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimeEntriesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeEntriesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimeEntriesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorization() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorization(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createMultipleCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/timeentries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMultipleValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        return createMultipleCall(body, _callback);

    }


    private ApiResponse<TimeEntriesCreateMultipleResponse> createMultipleWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = createMultipleValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TimeEntriesCreateMultipleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMultipleAsync(Object body, final ApiCallback<TimeEntriesCreateMultipleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMultipleValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TimeEntriesCreateMultipleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateMultipleRequestBuilder {
        private Object body;

        private CreateMultipleRequestBuilder() {
        }

        /**
         * Set body
         * @param body Create a single of multiple TimeEntry (toggle body type). (optional)
         * @return CreateMultipleRequestBuilder
         */
        public CreateMultipleRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for createMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return createMultipleCall(body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute createMultiple request
         * @return TimeEntriesCreateMultipleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TimeEntriesCreateMultipleResponse execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<TimeEntriesCreateMultipleResponse> localVarResp = createMultipleWithHttpInfo(body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createMultiple request with HTTP info returned
         * @return ApiResponse&lt;TimeEntriesCreateMultipleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeEntriesCreateMultipleResponse> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return createMultipleWithHttpInfo(body);
        }

        /**
         * Execute createMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeEntriesCreateMultipleResponse> _callback) throws ApiException {
            Object body = buildBodyParams();
            return createMultipleAsync(body, _callback);
        }
    }

    /**
     * Create new TimeEntries
     * &lt;!-- theme: warning --&gt;  &gt;#### Warning &gt; This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  You can create a single or multiple TimeEntries for a given user.  Beware, a new TimeEntry cannot intersect with a submitted or approved timesheet.
     * @return CreateMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateMultipleRequestBuilder createMultiple() throws IllegalArgumentException {
        return new CreateMultipleRequestBuilder();
    }
    private okhttp3.Call deleteMultipleCall(List<TimeEntriesDeleteMultipleRequestInner> timeEntriesDeleteMultipleRequestInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeEntriesDeleteMultipleRequestInner;

        // create path and map variables
        String localVarPath = "/api/v3/timeentries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMultipleValidateBeforeCall(List<TimeEntriesDeleteMultipleRequestInner> timeEntriesDeleteMultipleRequestInner, final ApiCallback _callback) throws ApiException {
        return deleteMultipleCall(timeEntriesDeleteMultipleRequestInner, _callback);

    }


    private ApiResponse<Void> deleteMultipleWithHttpInfo(List<TimeEntriesDeleteMultipleRequestInner> timeEntriesDeleteMultipleRequestInner) throws ApiException {
        okhttp3.Call localVarCall = deleteMultipleValidateBeforeCall(timeEntriesDeleteMultipleRequestInner, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteMultipleAsync(List<TimeEntriesDeleteMultipleRequestInner> timeEntriesDeleteMultipleRequestInner, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMultipleValidateBeforeCall(timeEntriesDeleteMultipleRequestInner, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteMultipleRequestBuilder {
        private List<TimeEntriesDeleteMultipleRequestInner> timeEntriesDeleteMultipleRequestInner;

        private DeleteMultipleRequestBuilder() {
        }

        /**
         * Set timeEntriesDeleteMultipleRequestInner
         * @param timeEntriesDeleteMultipleRequestInner  (optional)
         * @return DeleteMultipleRequestBuilder
         */
        public DeleteMultipleRequestBuilder timeEntriesDeleteMultipleRequestInner(List<TimeEntriesDeleteMultipleRequestInner> timeEntriesDeleteMultipleRequestInner) {
            this.timeEntriesDeleteMultipleRequestInner = timeEntriesDeleteMultipleRequestInner;
            return this;
        }

        /**
         * Build call for deleteMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<TimeEntriesDeleteMultipleRequestInner> timeEntriesDeleteMultipleRequestInner = buildBodyParams();
            return deleteMultipleCall(timeEntriesDeleteMultipleRequestInner, _callback);
        }

        private List<TimeEntriesDeleteMultipleRequestInner> buildBodyParams() {
            return this.timeEntriesDeleteMultipleRequestInner;
        }

        /**
         * Execute deleteMultiple request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<TimeEntriesDeleteMultipleRequestInner> timeEntriesDeleteMultipleRequestInner = buildBodyParams();
            deleteMultipleWithHttpInfo(timeEntriesDeleteMultipleRequestInner);
        }

        /**
         * Execute deleteMultiple request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<TimeEntriesDeleteMultipleRequestInner> timeEntriesDeleteMultipleRequestInner = buildBodyParams();
            return deleteMultipleWithHttpInfo(timeEntriesDeleteMultipleRequestInner);
        }

        /**
         * Execute deleteMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<TimeEntriesDeleteMultipleRequestInner> timeEntriesDeleteMultipleRequestInner = buildBodyParams();
            return deleteMultipleAsync(timeEntriesDeleteMultipleRequestInner, _callback);
        }
    }

    /**
     * Delete multiple TimeEntries
     * &lt;!-- theme: warning --&gt;  &gt;#### Warning &gt; This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Delete one or several TimeEntries. The \&quot;id\&quot; field of each TimeEntry must be sent and correspond to an existing TimeEntry.
     * @return DeleteMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMultipleRequestBuilder deleteMultiple() throws IllegalArgumentException {
        return new DeleteMultipleRequestBuilder();
    }
    private okhttp3.Call getByIdCall(Integer timeEntryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/timeentries/{timeEntryId}"
            .replace("{" + "timeEntryId" + "}", localVarApiClient.escapeString(timeEntryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(Integer timeEntryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeEntryId' is set
        if (timeEntryId == null) {
            throw new ApiException("Missing the required parameter 'timeEntryId' when calling getById(Async)");
        }

        return getByIdCall(timeEntryId, _callback);

    }


    private ApiResponse<TimeEntriesGetByIdResponse> getByIdWithHttpInfo(Integer timeEntryId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(timeEntryId, null);
        Type localVarReturnType = new TypeToken<TimeEntriesGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(Integer timeEntryId, final ApiCallback<TimeEntriesGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(timeEntryId, _callback);
        Type localVarReturnType = new TypeToken<TimeEntriesGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final Integer timeEntryId;

        private GetByIdRequestBuilder(Integer timeEntryId) {
            this.timeEntryId = timeEntryId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(timeEntryId, _callback);
        }


        /**
         * Execute getById request
         * @return TimeEntriesGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TimeEntriesGetByIdResponse execute() throws ApiException {
            ApiResponse<TimeEntriesGetByIdResponse> localVarResp = getByIdWithHttpInfo(timeEntryId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;TimeEntriesGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeEntriesGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(timeEntryId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeEntriesGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(timeEntryId, _callback);
        }
    }

    /**
     * Get a TimeEntry by id
     * Retrieve a single TimeEntry identified by its unique identifier.
     * @param timeEntryId Identifier of the TimeEntry. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(Integer timeEntryId) throws IllegalArgumentException {
        if (timeEntryId == null) throw new IllegalArgumentException("\"timeEntryId\" is required but got null");
        return new GetByIdRequestBuilder(timeEntryId);
    }
    private okhttp3.Call listTimeEntriesCall(String paging, List<Object> ownerId, String startsAt, List<Object> axisSectionsId, List<Object> axisSectionsCode, String modifiedAt, String archivedAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/timeentries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paging != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paging", paging));
        }

        if (ownerId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ownerId", ownerId));
        }

        if (startsAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startsAt", startsAt));
        }

        if (axisSectionsId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "axisSections.id", axisSectionsId));
        }

        if (axisSectionsCode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "axisSections.code", axisSectionsCode));
        }

        if (modifiedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedAt", modifiedAt));
        }

        if (archivedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archivedAt", archivedAt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTimeEntriesValidateBeforeCall(String paging, List<Object> ownerId, String startsAt, List<Object> axisSectionsId, List<Object> axisSectionsCode, String modifiedAt, String archivedAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paging' is set
        if (paging == null) {
            throw new ApiException("Missing the required parameter 'paging' when calling listTimeEntries(Async)");
        }

        return listTimeEntriesCall(paging, ownerId, startsAt, axisSectionsId, axisSectionsCode, modifiedAt, archivedAt, _callback);

    }


    private ApiResponse<TimeEntriesListTimeEntriesResponse> listTimeEntriesWithHttpInfo(String paging, List<Object> ownerId, String startsAt, List<Object> axisSectionsId, List<Object> axisSectionsCode, String modifiedAt, String archivedAt) throws ApiException {
        okhttp3.Call localVarCall = listTimeEntriesValidateBeforeCall(paging, ownerId, startsAt, axisSectionsId, axisSectionsCode, modifiedAt, archivedAt, null);
        Type localVarReturnType = new TypeToken<TimeEntriesListTimeEntriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTimeEntriesAsync(String paging, List<Object> ownerId, String startsAt, List<Object> axisSectionsId, List<Object> axisSectionsCode, String modifiedAt, String archivedAt, final ApiCallback<TimeEntriesListTimeEntriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTimeEntriesValidateBeforeCall(paging, ownerId, startsAt, axisSectionsId, axisSectionsCode, modifiedAt, archivedAt, _callback);
        Type localVarReturnType = new TypeToken<TimeEntriesListTimeEntriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTimeEntriesRequestBuilder {
        private final String paging;
        private List<Object> ownerId;
        private String startsAt;
        private List<Object> axisSectionsId;
        private List<Object> axisSectionsCode;
        private String modifiedAt;
        private String archivedAt;

        private ListTimeEntriesRequestBuilder(String paging) {
            this.paging = paging;
        }

        /**
         * Set ownerId
         * @param ownerId User&#39;s identifier (optional)
         * @return ListTimeEntriesRequestBuilder
         */
        public ListTimeEntriesRequestBuilder ownerId(List<Object> ownerId) {
            this.ownerId = ownerId;
            return this;
        }
        
        /**
         * Set startsAt
         * @param startsAt {comparator},{date-time} (optional)
         * @return ListTimeEntriesRequestBuilder
         */
        public ListTimeEntriesRequestBuilder startsAt(String startsAt) {
            this.startsAt = startsAt;
            return this;
        }
        
        /**
         * Set axisSectionsId
         * @param axisSectionsId Filter on a comma-separated list of AxisSections identifiers. (optional)
         * @return ListTimeEntriesRequestBuilder
         */
        public ListTimeEntriesRequestBuilder axisSectionsId(List<Object> axisSectionsId) {
            this.axisSectionsId = axisSectionsId;
            return this;
        }
        
        /**
         * Set axisSectionsCode
         * @param axisSectionsCode Filter on a comma-separated list of AxisSections codes. (optional)
         * @return ListTimeEntriesRequestBuilder
         */
        public ListTimeEntriesRequestBuilder axisSectionsCode(List<Object> axisSectionsCode) {
            this.axisSectionsCode = axisSectionsCode;
            return this;
        }
        
        /**
         * Set modifiedAt
         * @param modifiedAt {comparator},{date-time} (optional)
         * @return ListTimeEntriesRequestBuilder
         */
        public ListTimeEntriesRequestBuilder modifiedAt(String modifiedAt) {
            this.modifiedAt = modifiedAt;
            return this;
        }
        
        /**
         * Set archivedAt
         * @param archivedAt {comparator},{date-time} (optional)
         * @return ListTimeEntriesRequestBuilder
         */
        public ListTimeEntriesRequestBuilder archivedAt(String archivedAt) {
            this.archivedAt = archivedAt;
            return this;
        }
        
        /**
         * Build call for listTimeEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTimeEntriesCall(paging, ownerId, startsAt, axisSectionsId, axisSectionsCode, modifiedAt, archivedAt, _callback);
        }


        /**
         * Execute listTimeEntries request
         * @return TimeEntriesListTimeEntriesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TimeEntriesListTimeEntriesResponse execute() throws ApiException {
            ApiResponse<TimeEntriesListTimeEntriesResponse> localVarResp = listTimeEntriesWithHttpInfo(paging, ownerId, startsAt, axisSectionsId, axisSectionsCode, modifiedAt, archivedAt);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTimeEntries request with HTTP info returned
         * @return ApiResponse&lt;TimeEntriesListTimeEntriesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeEntriesListTimeEntriesResponse> executeWithHttpInfo() throws ApiException {
            return listTimeEntriesWithHttpInfo(paging, ownerId, startsAt, axisSectionsId, axisSectionsCode, modifiedAt, archivedAt);
        }

        /**
         * Execute listTimeEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeEntriesListTimeEntriesResponse> _callback) throws ApiException {
            return listTimeEntriesAsync(paging, ownerId, startsAt, axisSectionsId, axisSectionsCode, modifiedAt, archivedAt, _callback);
        }
    }

    /**
     * List TimeEntries
     * Retrieve a list of TimeEntries.  The &#x60;startsAt&#x60; query parameter can operate comparisons with a given date-time value: - &#x60;?startsAt&#x3D;2021-01-01&#x60;: strict equality. - &#x60;?startsAt&#x3D;since,2021-01-01&#x60;: greater than or equal. - &#x60;?startsAt&#x3D;until,2021-01-01&#x60;: lower than or equal. - &#x60;?startsAt&#x3D;between,2021-01-01,2021-01-31&#x60;: comprised between two dates.  To retrieve the total count of all TimeEntries (on all pages), please include the field &#x60;?field&#x3D;collection.count&#x60;.
     * @param paging {offset},{limit}. Defaults to 0,1000. (required)
     * @return ListTimeEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListTimeEntriesRequestBuilder listTimeEntries(String paging) throws IllegalArgumentException {
        if (paging == null) throw new IllegalArgumentException("\"paging\" is required but got null");
            

        return new ListTimeEntriesRequestBuilder(paging);
    }
    private okhttp3.Call removeByIdCall(Integer timeEntryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/timeentries/{timeEntryId}"
            .replace("{" + "timeEntryId" + "}", localVarApiClient.escapeString(timeEntryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(Integer timeEntryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeEntryId' is set
        if (timeEntryId == null) {
            throw new ApiException("Missing the required parameter 'timeEntryId' when calling removeById(Async)");
        }

        return removeByIdCall(timeEntryId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(Integer timeEntryId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(timeEntryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(Integer timeEntryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(timeEntryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final Integer timeEntryId;

        private RemoveByIdRequestBuilder(Integer timeEntryId) {
            this.timeEntryId = timeEntryId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(timeEntryId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(timeEntryId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(timeEntryId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(timeEntryId, _callback);
        }
    }

    /**
     * Delete a TimeEntry by id
     * &lt;!-- theme: warning --&gt;  &gt;#### Warning &gt; This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Delete a single TimeEntry. Deletion is irrevocable.
     * @param timeEntryId Identifier of the TimeEntry. (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(Integer timeEntryId) throws IllegalArgumentException {
        if (timeEntryId == null) throw new IllegalArgumentException("\"timeEntryId\" is required but got null");
        return new RemoveByIdRequestBuilder(timeEntryId);
    }
    private okhttp3.Call updateByIdCall(Integer timeEntryId, TimeEntry timeEntry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeEntry;

        // create path and map variables
        String localVarPath = "/api/v3/timeentries/{timeEntryId}"
            .replace("{" + "timeEntryId" + "}", localVarApiClient.escapeString(timeEntryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(Integer timeEntryId, TimeEntry timeEntry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeEntryId' is set
        if (timeEntryId == null) {
            throw new ApiException("Missing the required parameter 'timeEntryId' when calling updateById(Async)");
        }

        return updateByIdCall(timeEntryId, timeEntry, _callback);

    }


    private ApiResponse<TimeEntriesUpdateByIdResponse> updateByIdWithHttpInfo(Integer timeEntryId, TimeEntry timeEntry) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(timeEntryId, timeEntry, null);
        Type localVarReturnType = new TypeToken<TimeEntriesUpdateByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(Integer timeEntryId, TimeEntry timeEntry, final ApiCallback<TimeEntriesUpdateByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(timeEntryId, timeEntry, _callback);
        Type localVarReturnType = new TypeToken<TimeEntriesUpdateByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final OffsetDateTime startsAt;
        private final String duration;
        private final Integer unit;
        private final Integer ownerId;
        private final Integer timeEntryId;
        private Integer id;
        private OffsetDateTime endsAt;
        private Integer authorId;
        private OffsetDateTime createdAt;
        private Integer creationSource;
        private Integer modifierId;
        private Integer modifiedAt;
        private Integer layer;
        private List<AxisSection> axisSections;
        private TimeEntryComment comment;
        private Object timeTypeId;

        private UpdateByIdRequestBuilder(OffsetDateTime startsAt, String duration, Integer unit, Integer ownerId, Integer timeEntryId) {
            this.startsAt = startsAt;
            this.duration = duration;
            this.unit = unit;
            this.ownerId = ownerId;
            this.timeEntryId = timeEntryId;
        }

        /**
         * Set id
         * @param id Unique identifier for this object. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set endsAt
         * @param endsAt  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder endsAt(OffsetDateTime endsAt) {
            this.endsAt = endsAt;
            return this;
        }
        
        /**
         * Set authorId
         * @param authorId Identifier of the user who initially created this TimeEntry. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder authorId(Integer authorId) {
            this.authorId = authorId;
            return this;
        }
        
        /**
         * Set createdAt
         * @param createdAt  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        
        /**
         * Set creationSource
         * @param creationSource 0: Fallback on theoretical TimeEntries. 1: Application of bookmarked week. 2: Manual creation. 3: Import (optional, default to 2)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder creationSource(Integer creationSource) {
            this.creationSource = creationSource;
            return this;
        }
        
        /**
         * Set modifierId
         * @param modifierId The unique identifier of the user who last updated the TimeEntry. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder modifierId(Integer modifierId) {
            this.modifierId = modifierId;
            return this;
        }
        
        /**
         * Set modifiedAt
         * @param modifiedAt Date and time when TimeEntry was last modified. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder modifiedAt(Integer modifiedAt) {
            this.modifiedAt = modifiedAt;
            return this;
        }
        
        /**
         * Set layer
         * @param layer 0: Actual. 1: Theoretical (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder layer(Integer layer) {
            this.layer = layer;
            return this;
        }
        
        /**
         * Set axisSections
         * @param axisSections When not in activity mode, send an empty array, or do not serialize this property. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder axisSections(List<AxisSection> axisSections) {
            this.axisSections = axisSections;
            return this;
        }
        
        /**
         * Set comment
         * @param comment  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder comment(TimeEntryComment comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Set timeTypeId
         * @param timeTypeId  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder timeTypeId(Object timeTypeId) {
            this.timeTypeId = timeTypeId;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeEntry timeEntry = buildBodyParams();
            return updateByIdCall(timeEntryId, timeEntry, _callback);
        }

        private TimeEntry buildBodyParams() {
            TimeEntry timeEntry = new TimeEntry();
            timeEntry.id(this.id);
            timeEntry.startsAt(this.startsAt);
            timeEntry.duration(this.duration);
            if (this.unit != null)
            timeEntry.unit(TimeEntry.UnitEnum.fromValue(this.unit));
            timeEntry.endsAt(this.endsAt);
            timeEntry.ownerId(this.ownerId);
            timeEntry.authorId(this.authorId);
            timeEntry.createdAt(this.createdAt);
            if (this.creationSource != null)
            timeEntry.creationSource(TimeEntry.CreationSourceEnum.fromValue(this.creationSource));
            timeEntry.modifierId(this.modifierId);
            timeEntry.modifiedAt(this.modifiedAt);
            timeEntry.layer(this.layer);
            timeEntry.axisSections(this.axisSections);
            timeEntry.comment(this.comment);
            timeEntry.timeTypeId(this.timeTypeId);
            return timeEntry;
        }

        /**
         * Execute updateById request
         * @return TimeEntriesUpdateByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TimeEntriesUpdateByIdResponse execute() throws ApiException {
            TimeEntry timeEntry = buildBodyParams();
            ApiResponse<TimeEntriesUpdateByIdResponse> localVarResp = updateByIdWithHttpInfo(timeEntryId, timeEntry);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;TimeEntriesUpdateByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeEntriesUpdateByIdResponse> executeWithHttpInfo() throws ApiException {
            TimeEntry timeEntry = buildBodyParams();
            return updateByIdWithHttpInfo(timeEntryId, timeEntry);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeEntriesUpdateByIdResponse> _callback) throws ApiException {
            TimeEntry timeEntry = buildBodyParams();
            return updateByIdAsync(timeEntryId, timeEntry, _callback);
        }
    }

    /**
     * Update a TimeEntry by id
     * &lt;!-- theme: warning --&gt;  &gt;#### Warning &gt; This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Update fields of a single TimeEntry identified by its unique id.
     * @param timeEntryId Identifier of the TimeEntry. (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(OffsetDateTime startsAt, String duration, Integer unit, Integer ownerId, Integer timeEntryId) throws IllegalArgumentException {
        if (startsAt == null) throw new IllegalArgumentException("\"startsAt\" is required but got null");
        if (duration == null) throw new IllegalArgumentException("\"duration\" is required but got null");
            

        if (unit == null) throw new IllegalArgumentException("\"unit\" is required but got null");
        if (ownerId == null) throw new IllegalArgumentException("\"ownerId\" is required but got null");
        if (timeEntryId == null) throw new IllegalArgumentException("\"timeEntryId\" is required but got null");
        return new UpdateByIdRequestBuilder(startsAt, duration, unit, ownerId, timeEntryId);
    }
    private okhttp3.Call updateMultipleCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/timeentries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMultipleValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        return updateMultipleCall(body, _callback);

    }


    private ApiResponse<TimeEntriesUpdateMultipleResponse> updateMultipleWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = updateMultipleValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TimeEntriesUpdateMultipleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMultipleAsync(Object body, final ApiCallback<TimeEntriesUpdateMultipleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMultipleValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TimeEntriesUpdateMultipleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMultipleRequestBuilder {
        private Object body;

        private UpdateMultipleRequestBuilder() {
        }

        /**
         * Set body
         * @param body You can either update a single or multiple TimeEntries. Pick the correct body type accordingly. (optional)
         * @return UpdateMultipleRequestBuilder
         */
        public UpdateMultipleRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for updateMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return updateMultipleCall(body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute updateMultiple request
         * @return TimeEntriesUpdateMultipleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public TimeEntriesUpdateMultipleResponse execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<TimeEntriesUpdateMultipleResponse> localVarResp = updateMultipleWithHttpInfo(body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMultiple request with HTTP info returned
         * @return ApiResponse&lt;TimeEntriesUpdateMultipleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<TimeEntriesUpdateMultipleResponse> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return updateMultipleWithHttpInfo(body);
        }

        /**
         * Execute updateMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<TimeEntriesUpdateMultipleResponse> _callback) throws ApiException {
            Object body = buildBodyParams();
            return updateMultipleAsync(body, _callback);
        }
    }

    /**
     * Update multiple TimeEntries
     * &lt;!-- theme: warning --&gt;  &gt;#### Warning &gt; This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Update one or several TimeEntries. The \&quot;id\&quot; field must be sent and correspond to an existing TimeEntry.
     * @return UpdateMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public UpdateMultipleRequestBuilder updateMultiple() throws IllegalArgumentException {
        return new UpdateMultipleRequestBuilder();
    }
}
