/*
 * Timmi Timesheet API
 * Welcome on the documentation for the Timmi Timesheet API. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.Report;
import com.konfigthis.client.model.ReportColumnsInner;
import com.konfigthis.client.model.ReportFiltersInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReportsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorization() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorization(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createBasedOnTemplateCall(Report report, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = report;

        // create path and map variables
        String localVarPath = "/timmi-timesheet/api/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBasedOnTemplateValidateBeforeCall(Report report, final ApiCallback _callback) throws ApiException {
        return createBasedOnTemplateCall(report, _callback);

    }


    private ApiResponse<Report> createBasedOnTemplateWithHttpInfo(Report report) throws ApiException {
        okhttp3.Call localVarCall = createBasedOnTemplateValidateBeforeCall(report, null);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createBasedOnTemplateAsync(Report report, final ApiCallback<Report> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBasedOnTemplateValidateBeforeCall(report, _callback);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateBasedOnTemplateRequestBuilder {
        private final String templateId;
        private Integer id;
        private String status;
        private String name;
        private LocalDate startsOn;
        private LocalDate endsOn;
        private List<ReportFiltersInner> filters;
        private List<ReportColumnsInner> columns;

        private CreateBasedOnTemplateRequestBuilder(String templateId) {
            this.templateId = templateId;
        }

        /**
         * Set id
         * @param id  (optional)
         * @return CreateBasedOnTemplateRequestBuilder
         */
        public CreateBasedOnTemplateRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return CreateBasedOnTemplateRequestBuilder
         */
        public CreateBasedOnTemplateRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CreateBasedOnTemplateRequestBuilder
         */
        public CreateBasedOnTemplateRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set startsOn
         * @param startsOn  (optional)
         * @return CreateBasedOnTemplateRequestBuilder
         */
        public CreateBasedOnTemplateRequestBuilder startsOn(LocalDate startsOn) {
            this.startsOn = startsOn;
            return this;
        }
        
        /**
         * Set endsOn
         * @param endsOn  (optional)
         * @return CreateBasedOnTemplateRequestBuilder
         */
        public CreateBasedOnTemplateRequestBuilder endsOn(LocalDate endsOn) {
            this.endsOn = endsOn;
            return this;
        }
        
        /**
         * Set filters
         * @param filters  (optional)
         * @return CreateBasedOnTemplateRequestBuilder
         */
        public CreateBasedOnTemplateRequestBuilder filters(List<ReportFiltersInner> filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Set columns
         * @param columns  (optional)
         * @return CreateBasedOnTemplateRequestBuilder
         */
        public CreateBasedOnTemplateRequestBuilder columns(List<ReportColumnsInner> columns) {
            this.columns = columns;
            return this;
        }
        
        /**
         * Build call for createBasedOnTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Report report = buildBodyParams();
            return createBasedOnTemplateCall(report, _callback);
        }

        private Report buildBodyParams() {
            Report report = new Report();
            report.id(this.id);
            if (this.status != null)
            report.status(Report.StatusEnum.fromValue(this.status));
            report.name(this.name);
            report.templateId(this.templateId);
            report.startsOn(this.startsOn);
            report.endsOn(this.endsOn);
            report.filters(this.filters);
            report.columns(this.columns);
            return report;
        }

        /**
         * Execute createBasedOnTemplate request
         * @return Report
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public Report execute() throws ApiException {
            Report report = buildBodyParams();
            ApiResponse<Report> localVarResp = createBasedOnTemplateWithHttpInfo(report);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createBasedOnTemplate request with HTTP info returned
         * @return ApiResponse&lt;Report&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Report> executeWithHttpInfo() throws ApiException {
            Report report = buildBodyParams();
            return createBasedOnTemplateWithHttpInfo(report);
        }

        /**
         * Execute createBasedOnTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Report> _callback) throws ApiException {
            Report report = buildBodyParams();
            return createBasedOnTemplateAsync(report, _callback);
        }
    }

    /**
     * Create a new Report
     * &lt;!-- theme: info --&gt; &gt; This endpoint does not adhere to the \&quot;v3 API endpoints\&quot; principles. The \&quot;fields\&quot; query parameter is not supported, but all fields are systematically returned.  A report can only be created based on an existing report-template. So you first need to retrieve the report-template unique identifier &#x60;templateId&#x60;.
     * @return CreateBasedOnTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public CreateBasedOnTemplateRequestBuilder createBasedOnTemplate(String templateId) throws IllegalArgumentException {
        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new CreateBasedOnTemplateRequestBuilder(templateId);
    }
    private okhttp3.Call downloadCsvReportCall(Integer reportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timmi-timesheet/api/reports/{reportId}/download-csv"
            .replace("{" + "reportId" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadCsvReportValidateBeforeCall(Integer reportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling downloadCsvReport(Async)");
        }

        return downloadCsvReportCall(reportId, _callback);

    }


    private ApiResponse<String> downloadCsvReportWithHttpInfo(Integer reportId) throws ApiException {
        okhttp3.Call localVarCall = downloadCsvReportValidateBeforeCall(reportId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadCsvReportAsync(Integer reportId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadCsvReportValidateBeforeCall(reportId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DownloadCsvReportRequestBuilder {
        private final Integer reportId;

        private DownloadCsvReportRequestBuilder(Integer reportId) {
            this.reportId = reportId;
        }

        /**
         * Build call for downloadCsvReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadCsvReportCall(reportId, _callback);
        }


        /**
         * Execute downloadCsvReport request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = downloadCsvReportWithHttpInfo(reportId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute downloadCsvReport request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return downloadCsvReportWithHttpInfo(reportId);
        }

        /**
         * Execute downloadCsvReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return downloadCsvReportAsync(reportId, _callback);
        }
    }

    /**
     * Download Report as CSV
     * &lt;!-- theme: info --&gt; &gt; This endpoint does not adhere to the \&quot;v3 API endpoints\&quot; principles.  Download a report content as an CSV file &#x60;.csv&#x60;.  Column delimiter and numbers formating depends on the authentified user&#39;s culture.
     * @param reportId Identifier of the report. (required)
     * @return DownloadCsvReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public DownloadCsvReportRequestBuilder downloadCsvReport(Integer reportId) throws IllegalArgumentException {
        if (reportId == null) throw new IllegalArgumentException("\"reportId\" is required but got null");
        return new DownloadCsvReportRequestBuilder(reportId);
    }
    private okhttp3.Call downloadExcelReportCall(Integer reportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timmi-timesheet/api/reports/{reportId}/download-excel"
            .replace("{" + "reportId" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadExcelReportValidateBeforeCall(Integer reportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling downloadExcelReport(Async)");
        }

        return downloadExcelReportCall(reportId, _callback);

    }


    private ApiResponse<String> downloadExcelReportWithHttpInfo(Integer reportId) throws ApiException {
        okhttp3.Call localVarCall = downloadExcelReportValidateBeforeCall(reportId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadExcelReportAsync(Integer reportId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadExcelReportValidateBeforeCall(reportId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DownloadExcelReportRequestBuilder {
        private final Integer reportId;

        private DownloadExcelReportRequestBuilder(Integer reportId) {
            this.reportId = reportId;
        }

        /**
         * Build call for downloadExcelReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadExcelReportCall(reportId, _callback);
        }


        /**
         * Execute downloadExcelReport request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = downloadExcelReportWithHttpInfo(reportId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute downloadExcelReport request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return downloadExcelReportWithHttpInfo(reportId);
        }

        /**
         * Execute downloadExcelReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return downloadExcelReportAsync(reportId, _callback);
        }
    }

    /**
     * Download Report as Excel
     * &lt;!-- theme: info --&gt; &gt; This endpoint does not adhere to the \&quot;v3 API endpoints\&quot; principles.  Download a report content as an Excel file &#x60;.xls&#x60;.  Column delimiter and numbers formating depends on the authentified user&#39;s culture.
     * @param reportId Identifier of the report. (required)
     * @return DownloadExcelReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public DownloadExcelReportRequestBuilder downloadExcelReport(Integer reportId) throws IllegalArgumentException {
        if (reportId == null) throw new IllegalArgumentException("\"reportId\" is required but got null");
        return new DownloadExcelReportRequestBuilder(reportId);
    }
}
