/*
 * Timmi Timesheet API
 * Welcome on the documentation for the Timmi Timesheet API. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.OwnerId;
import com.konfigthis.client.model.Status;
import com.konfigthis.client.model.TimesheetsListDueResponse;
import com.konfigthis.client.model.TimesheetsListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimesheetsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimesheetsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimesheetsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorization() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorization(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listCall(List<OwnerId> ownerId, String startsOn, List<Status> status, String endsOn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/timmitimesheets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownerId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ownerId", ownerId));
        }

        if (startsOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startsOn", startsOn));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        if (endsOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endsOn", endsOn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(List<OwnerId> ownerId, String startsOn, List<Status> status, String endsOn, final ApiCallback _callback) throws ApiException {
        return listCall(ownerId, startsOn, status, endsOn, _callback);

    }


    private ApiResponse<TimesheetsListResponse> listWithHttpInfo(List<OwnerId> ownerId, String startsOn, List<Status> status, String endsOn) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(ownerId, startsOn, status, endsOn, null);
        Type localVarReturnType = new TypeToken<TimesheetsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(List<OwnerId> ownerId, String startsOn, List<Status> status, String endsOn, final ApiCallback<TimesheetsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(ownerId, startsOn, status, endsOn, _callback);
        Type localVarReturnType = new TypeToken<TimesheetsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private List<OwnerId> ownerId;
        private String startsOn;
        private List<Status> status;
        private String endsOn;

        private ListRequestBuilder() {
        }

        /**
         * Set ownerId
         * @param ownerId User&#39;s identifier. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder ownerId(List<OwnerId> ownerId) {
            this.ownerId = ownerId;
            return this;
        }
        
        /**
         * Set startsOn
         * @param startsOn Filter on the start date of the timesheet. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder startsOn(String startsOn) {
            this.startsOn = startsOn;
            return this;
        }
        
        /**
         * Set status
         * @param status Filter on the timesheet workflow status. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder status(List<Status> status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set endsOn
         * @param endsOn Filter on the end date of the timesheet. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder endsOn(String endsOn) {
            this.endsOn = endsOn;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(ownerId, startsOn, status, endsOn, _callback);
        }


        /**
         * Execute list request
         * @return TimesheetsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TimesheetsListResponse execute() throws ApiException {
            ApiResponse<TimesheetsListResponse> localVarResp = listWithHttpInfo(ownerId, startsOn, status, endsOn);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;TimesheetsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimesheetsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(ownerId, startsOn, status, endsOn);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimesheetsListResponse> _callback) throws ApiException {
            return listAsync(ownerId, startsOn, status, endsOn, _callback);
        }
    }

    /**
     * List timesheets
     * List all timesheets satisfying query filters.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call listDueCall(List<Integer> ownerIds, List<Integer> legalEntityIds, List<Integer> managerIds, LocalDate start, LocalDate end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/timmitimesheets/remindable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownerIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ownerIds", ownerIds));
        }

        if (legalEntityIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "legalEntityIds", legalEntityIds));
        }

        if (managerIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "managerIds", managerIds));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDueValidateBeforeCall(List<Integer> ownerIds, List<Integer> legalEntityIds, List<Integer> managerIds, LocalDate start, LocalDate end, final ApiCallback _callback) throws ApiException {
        return listDueCall(ownerIds, legalEntityIds, managerIds, start, end, _callback);

    }


    private ApiResponse<TimesheetsListDueResponse> listDueWithHttpInfo(List<Integer> ownerIds, List<Integer> legalEntityIds, List<Integer> managerIds, LocalDate start, LocalDate end) throws ApiException {
        okhttp3.Call localVarCall = listDueValidateBeforeCall(ownerIds, legalEntityIds, managerIds, start, end, null);
        Type localVarReturnType = new TypeToken<TimesheetsListDueResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDueAsync(List<Integer> ownerIds, List<Integer> legalEntityIds, List<Integer> managerIds, LocalDate start, LocalDate end, final ApiCallback<TimesheetsListDueResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDueValidateBeforeCall(ownerIds, legalEntityIds, managerIds, start, end, _callback);
        Type localVarReturnType = new TypeToken<TimesheetsListDueResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDueRequestBuilder {
        private List<Integer> ownerIds;
        private List<Integer> legalEntityIds;
        private List<Integer> managerIds;
        private LocalDate start;
        private LocalDate end;

        private ListDueRequestBuilder() {
        }

        /**
         * Set ownerIds
         * @param ownerIds List unique identifier of submitters. (optional)
         * @return ListDueRequestBuilder
         */
        public ListDueRequestBuilder ownerIds(List<Integer> ownerIds) {
            this.ownerIds = ownerIds;
            return this;
        }
        
        /**
         * Set legalEntityIds
         * @param legalEntityIds List unique identifier of submitters&#39; legal establishments. (optional)
         * @return ListDueRequestBuilder
         */
        public ListDueRequestBuilder legalEntityIds(List<Integer> legalEntityIds) {
            this.legalEntityIds = legalEntityIds;
            return this;
        }
        
        /**
         * Set managerIds
         * @param managerIds List unique identifier of submitters&#39; manager. (optional)
         * @return ListDueRequestBuilder
         */
        public ListDueRequestBuilder managerIds(List<Integer> managerIds) {
            this.managerIds = managerIds;
            return this;
        }
        
        /**
         * Set start
         * @param start Prevent older timesheets to be returned. (optional)
         * @return ListDueRequestBuilder
         */
        public ListDueRequestBuilder start(LocalDate start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set end
         * @param end Prevent earlier timesheets to be returned (date excluded). Defaults to today when not sent. (optional)
         * @return ListDueRequestBuilder
         */
        public ListDueRequestBuilder end(LocalDate end) {
            this.end = end;
            return this;
        }
        
        /**
         * Build call for listDue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDueCall(ownerIds, legalEntityIds, managerIds, start, end, _callback);
        }


        /**
         * Execute listDue request
         * @return TimesheetsListDueResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TimesheetsListDueResponse execute() throws ApiException {
            ApiResponse<TimesheetsListDueResponse> localVarResp = listDueWithHttpInfo(ownerIds, legalEntityIds, managerIds, start, end);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDue request with HTTP info returned
         * @return ApiResponse&lt;TimesheetsListDueResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimesheetsListDueResponse> executeWithHttpInfo() throws ApiException {
            return listDueWithHttpInfo(ownerIds, legalEntityIds, managerIds, start, end);
        }

        /**
         * Execute listDue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimesheetsListDueResponse> _callback) throws ApiException {
            return listDueAsync(ownerIds, legalEntityIds, managerIds, start, end, _callback);
        }
    }

    /**
     * List due timesheets
     * List timesheet that are not yet submitted (status: 0).  You must filter on either &#x60;ownerIds&#x60;, &#x60;managerIds&#x60; or &#x60;legalEntityIds&#x60;. As long as a timesheet is not submitted, its unique identifier is equal to zero.
     * @return ListDueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListDueRequestBuilder listDue() throws IllegalArgumentException {
        return new ListDueRequestBuilder();
    }
}
