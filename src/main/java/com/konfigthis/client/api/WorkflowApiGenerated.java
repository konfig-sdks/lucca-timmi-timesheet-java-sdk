/*
 * Timmi Timesheet API
 * Welcome on the documentation for the Timmi Timesheet API. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.WorkflowApproveTimesheetsByIdRequest;
import com.konfigthis.client.model.WorkflowApproveTimesheetsByIdRequestTimesheetsInner;
import com.konfigthis.client.model.WorkflowCancelTimesheetByIdRequest;
import com.konfigthis.client.model.WorkflowCancelTimesheetByIdRequestTimesheetsInner;
import com.konfigthis.client.model.WorkflowDenyTimesheetByIdRequest;
import com.konfigthis.client.model.WorkflowDenyTimesheetByIdRequestTimesheetsInner;
import com.konfigthis.client.model.WorkflowInvalidateTimesheetByIdRequest;
import com.konfigthis.client.model.WorkflowSendReminderEmailRequest;
import com.konfigthis.client.model.WorkflowSendReminderEmailRequestTimesheetsInner;
import com.konfigthis.client.model.WorkflowSubmitTimesheetRequest;
import com.konfigthis.client.model.WorkflowSubmitTimesheetRequestTimesheetsInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkflowApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkflowApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WorkflowApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorization() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorization(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call approveTimesheetsByIdCall(WorkflowApproveTimesheetsByIdRequest workflowApproveTimesheetsByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowApproveTimesheetsByIdRequest;

        // create path and map variables
        String localVarPath = "/timmi/services/workflow/approve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveTimesheetsByIdValidateBeforeCall(WorkflowApproveTimesheetsByIdRequest workflowApproveTimesheetsByIdRequest, final ApiCallback _callback) throws ApiException {
        return approveTimesheetsByIdCall(workflowApproveTimesheetsByIdRequest, _callback);

    }


    private ApiResponse<WorkflowSendReminderEmailResponse> approveTimesheetsByIdWithHttpInfo(WorkflowApproveTimesheetsByIdRequest workflowApproveTimesheetsByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = approveTimesheetsByIdValidateBeforeCall(workflowApproveTimesheetsByIdRequest, null);
        Type localVarReturnType = new TypeToken<WorkflowSendReminderEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call approveTimesheetsByIdAsync(WorkflowApproveTimesheetsByIdRequest workflowApproveTimesheetsByIdRequest, final ApiCallback<WorkflowSendReminderEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveTimesheetsByIdValidateBeforeCall(workflowApproveTimesheetsByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkflowSendReminderEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ApproveTimesheetsByIdRequestBuilder {
        private List<WorkflowApproveTimesheetsByIdRequestTimesheetsInner> timesheets;

        private ApproveTimesheetsByIdRequestBuilder() {
        }

        /**
         * Set timesheets
         * @param timesheets  (optional)
         * @return ApproveTimesheetsByIdRequestBuilder
         */
        public ApproveTimesheetsByIdRequestBuilder timesheets(List<WorkflowApproveTimesheetsByIdRequestTimesheetsInner> timesheets) {
            this.timesheets = timesheets;
            return this;
        }
        
        /**
         * Build call for approveTimesheetsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkflowApproveTimesheetsByIdRequest workflowApproveTimesheetsByIdRequest = buildBodyParams();
            return approveTimesheetsByIdCall(workflowApproveTimesheetsByIdRequest, _callback);
        }

        private WorkflowApproveTimesheetsByIdRequest buildBodyParams() {
            WorkflowApproveTimesheetsByIdRequest workflowApproveTimesheetsByIdRequest = new WorkflowApproveTimesheetsByIdRequest();
            workflowApproveTimesheetsByIdRequest.timesheets(this.timesheets);
            return workflowApproveTimesheetsByIdRequest;
        }

        /**
         * Execute approveTimesheetsById request
         * @return WorkflowSendReminderEmailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public WorkflowSendReminderEmailResponse execute() throws ApiException {
            WorkflowApproveTimesheetsByIdRequest workflowApproveTimesheetsByIdRequest = buildBodyParams();
            ApiResponse<WorkflowSendReminderEmailResponse> localVarResp = approveTimesheetsByIdWithHttpInfo(workflowApproveTimesheetsByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute approveTimesheetsById request with HTTP info returned
         * @return ApiResponse&lt;WorkflowSendReminderEmailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<WorkflowSendReminderEmailResponse> executeWithHttpInfo() throws ApiException {
            WorkflowApproveTimesheetsByIdRequest workflowApproveTimesheetsByIdRequest = buildBodyParams();
            return approveTimesheetsByIdWithHttpInfo(workflowApproveTimesheetsByIdRequest);
        }

        /**
         * Execute approveTimesheetsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowSendReminderEmailResponse> _callback) throws ApiException {
            WorkflowApproveTimesheetsByIdRequest workflowApproveTimesheetsByIdRequest = buildBodyParams();
            return approveTimesheetsByIdAsync(workflowApproveTimesheetsByIdRequest, _callback);
        }
    }

    /**
     * Approve Timesheets by id
     * &lt;!-- theme: warning --&gt;  &gt;#### Warning &gt; This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1approve/post)  Multiple approvals can be required, depending on the configuration.  Once all approvals needed are satisfied, the timesheet status is set to &#x60;2: Approved&#x60;.  Comprised TimeEntries can only be modified by rejecting the timesheet through the \&quot;invalidate\&quot; operation.
     * @return ApproveTimesheetsByIdRequestBuilder
     */
    public ApproveTimesheetsByIdRequestBuilder approveTimesheetsById() throws IllegalArgumentException {
        return new ApproveTimesheetsByIdRequestBuilder();
    }
    private okhttp3.Call cancelTimesheetByIdCall(WorkflowCancelTimesheetByIdRequest workflowCancelTimesheetByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowCancelTimesheetByIdRequest;

        // create path and map variables
        String localVarPath = "/timmi/services/workflow/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelTimesheetByIdValidateBeforeCall(WorkflowCancelTimesheetByIdRequest workflowCancelTimesheetByIdRequest, final ApiCallback _callback) throws ApiException {
        return cancelTimesheetByIdCall(workflowCancelTimesheetByIdRequest, _callback);

    }


    private ApiResponse<WorkflowSendReminderEmailResponse> cancelTimesheetByIdWithHttpInfo(WorkflowCancelTimesheetByIdRequest workflowCancelTimesheetByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = cancelTimesheetByIdValidateBeforeCall(workflowCancelTimesheetByIdRequest, null);
        Type localVarReturnType = new TypeToken<WorkflowSendReminderEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelTimesheetByIdAsync(WorkflowCancelTimesheetByIdRequest workflowCancelTimesheetByIdRequest, final ApiCallback<WorkflowSendReminderEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelTimesheetByIdValidateBeforeCall(workflowCancelTimesheetByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkflowSendReminderEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelTimesheetByIdRequestBuilder {
        private List<WorkflowCancelTimesheetByIdRequestTimesheetsInner> timesheets;

        private CancelTimesheetByIdRequestBuilder() {
        }

        /**
         * Set timesheets
         * @param timesheets  (optional)
         * @return CancelTimesheetByIdRequestBuilder
         */
        public CancelTimesheetByIdRequestBuilder timesheets(List<WorkflowCancelTimesheetByIdRequestTimesheetsInner> timesheets) {
            this.timesheets = timesheets;
            return this;
        }
        
        /**
         * Build call for cancelTimesheetById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkflowCancelTimesheetByIdRequest workflowCancelTimesheetByIdRequest = buildBodyParams();
            return cancelTimesheetByIdCall(workflowCancelTimesheetByIdRequest, _callback);
        }

        private WorkflowCancelTimesheetByIdRequest buildBodyParams() {
            WorkflowCancelTimesheetByIdRequest workflowCancelTimesheetByIdRequest = new WorkflowCancelTimesheetByIdRequest();
            workflowCancelTimesheetByIdRequest.timesheets(this.timesheets);
            return workflowCancelTimesheetByIdRequest;
        }

        /**
         * Execute cancelTimesheetById request
         * @return WorkflowSendReminderEmailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public WorkflowSendReminderEmailResponse execute() throws ApiException {
            WorkflowCancelTimesheetByIdRequest workflowCancelTimesheetByIdRequest = buildBodyParams();
            ApiResponse<WorkflowSendReminderEmailResponse> localVarResp = cancelTimesheetByIdWithHttpInfo(workflowCancelTimesheetByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelTimesheetById request with HTTP info returned
         * @return ApiResponse&lt;WorkflowSendReminderEmailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<WorkflowSendReminderEmailResponse> executeWithHttpInfo() throws ApiException {
            WorkflowCancelTimesheetByIdRequest workflowCancelTimesheetByIdRequest = buildBodyParams();
            return cancelTimesheetByIdWithHttpInfo(workflowCancelTimesheetByIdRequest);
        }

        /**
         * Execute cancelTimesheetById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowSendReminderEmailResponse> _callback) throws ApiException {
            WorkflowCancelTimesheetByIdRequest workflowCancelTimesheetByIdRequest = buildBodyParams();
            return cancelTimesheetByIdAsync(workflowCancelTimesheetByIdRequest, _callback);
        }
    }

    /**
     * Cancel Timesheets by id
     * &lt;!-- theme: warning --&gt;  &gt;#### Warning &gt; This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1cancel/post)  Cancel a timesheet&#39;s submission. Can only be achieved by the original submitter as long as the timesheet&#39;s not approved.  Sets the timesheet status to &#x60;3&#x60; (rejected).
     * @return CancelTimesheetByIdRequestBuilder
     */
    public CancelTimesheetByIdRequestBuilder cancelTimesheetById() throws IllegalArgumentException {
        return new CancelTimesheetByIdRequestBuilder();
    }
    private okhttp3.Call denyTimesheetByIdCall(WorkflowDenyTimesheetByIdRequest workflowDenyTimesheetByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowDenyTimesheetByIdRequest;

        // create path and map variables
        String localVarPath = "/timmi/services/workflow/deny";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call denyTimesheetByIdValidateBeforeCall(WorkflowDenyTimesheetByIdRequest workflowDenyTimesheetByIdRequest, final ApiCallback _callback) throws ApiException {
        return denyTimesheetByIdCall(workflowDenyTimesheetByIdRequest, _callback);

    }


    private ApiResponse<WorkflowSendReminderEmailResponse> denyTimesheetByIdWithHttpInfo(WorkflowDenyTimesheetByIdRequest workflowDenyTimesheetByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = denyTimesheetByIdValidateBeforeCall(workflowDenyTimesheetByIdRequest, null);
        Type localVarReturnType = new TypeToken<WorkflowSendReminderEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call denyTimesheetByIdAsync(WorkflowDenyTimesheetByIdRequest workflowDenyTimesheetByIdRequest, final ApiCallback<WorkflowSendReminderEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = denyTimesheetByIdValidateBeforeCall(workflowDenyTimesheetByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkflowSendReminderEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DenyTimesheetByIdRequestBuilder {
        private List<WorkflowDenyTimesheetByIdRequestTimesheetsInner> timesheets;

        private DenyTimesheetByIdRequestBuilder() {
        }

        /**
         * Set timesheets
         * @param timesheets  (optional)
         * @return DenyTimesheetByIdRequestBuilder
         */
        public DenyTimesheetByIdRequestBuilder timesheets(List<WorkflowDenyTimesheetByIdRequestTimesheetsInner> timesheets) {
            this.timesheets = timesheets;
            return this;
        }
        
        /**
         * Build call for denyTimesheetById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkflowDenyTimesheetByIdRequest workflowDenyTimesheetByIdRequest = buildBodyParams();
            return denyTimesheetByIdCall(workflowDenyTimesheetByIdRequest, _callback);
        }

        private WorkflowDenyTimesheetByIdRequest buildBodyParams() {
            WorkflowDenyTimesheetByIdRequest workflowDenyTimesheetByIdRequest = new WorkflowDenyTimesheetByIdRequest();
            workflowDenyTimesheetByIdRequest.timesheets(this.timesheets);
            return workflowDenyTimesheetByIdRequest;
        }

        /**
         * Execute denyTimesheetById request
         * @return WorkflowSendReminderEmailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public WorkflowSendReminderEmailResponse execute() throws ApiException {
            WorkflowDenyTimesheetByIdRequest workflowDenyTimesheetByIdRequest = buildBodyParams();
            ApiResponse<WorkflowSendReminderEmailResponse> localVarResp = denyTimesheetByIdWithHttpInfo(workflowDenyTimesheetByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute denyTimesheetById request with HTTP info returned
         * @return ApiResponse&lt;WorkflowSendReminderEmailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<WorkflowSendReminderEmailResponse> executeWithHttpInfo() throws ApiException {
            WorkflowDenyTimesheetByIdRequest workflowDenyTimesheetByIdRequest = buildBodyParams();
            return denyTimesheetByIdWithHttpInfo(workflowDenyTimesheetByIdRequest);
        }

        /**
         * Execute denyTimesheetById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowSendReminderEmailResponse> _callback) throws ApiException {
            WorkflowDenyTimesheetByIdRequest workflowDenyTimesheetByIdRequest = buildBodyParams();
            return denyTimesheetByIdAsync(workflowDenyTimesheetByIdRequest, _callback);
        }
    }

    /**
     * Deny Timesheets by id
     * &lt;!-- theme: warning --&gt;  &gt;#### Warning &gt; This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1deny/post)  Denies a submitted timesheet pending approval. Sets its status to &#x60;3&#x60; (rejected) and a new timesheet may be submitted for this User and [StartsOn - EndsOn[.  Comment is mandatory.
     * @return DenyTimesheetByIdRequestBuilder
     */
    public DenyTimesheetByIdRequestBuilder denyTimesheetById() throws IllegalArgumentException {
        return new DenyTimesheetByIdRequestBuilder();
    }
    private okhttp3.Call invalidateTimesheetByIdCall(WorkflowInvalidateTimesheetByIdRequest workflowInvalidateTimesheetByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowInvalidateTimesheetByIdRequest;

        // create path and map variables
        String localVarPath = "/timmi/services/workflow/invalidate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invalidateTimesheetByIdValidateBeforeCall(WorkflowInvalidateTimesheetByIdRequest workflowInvalidateTimesheetByIdRequest, final ApiCallback _callback) throws ApiException {
        return invalidateTimesheetByIdCall(workflowInvalidateTimesheetByIdRequest, _callback);

    }


    private ApiResponse<WorkflowSendReminderEmailResponse> invalidateTimesheetByIdWithHttpInfo(WorkflowInvalidateTimesheetByIdRequest workflowInvalidateTimesheetByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = invalidateTimesheetByIdValidateBeforeCall(workflowInvalidateTimesheetByIdRequest, null);
        Type localVarReturnType = new TypeToken<WorkflowSendReminderEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call invalidateTimesheetByIdAsync(WorkflowInvalidateTimesheetByIdRequest workflowInvalidateTimesheetByIdRequest, final ApiCallback<WorkflowSendReminderEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = invalidateTimesheetByIdValidateBeforeCall(workflowInvalidateTimesheetByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkflowSendReminderEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InvalidateTimesheetByIdRequestBuilder {
        private List<WorkflowCancelTimesheetByIdRequestTimesheetsInner> timesheets;

        private InvalidateTimesheetByIdRequestBuilder() {
        }

        /**
         * Set timesheets
         * @param timesheets  (optional)
         * @return InvalidateTimesheetByIdRequestBuilder
         */
        public InvalidateTimesheetByIdRequestBuilder timesheets(List<WorkflowCancelTimesheetByIdRequestTimesheetsInner> timesheets) {
            this.timesheets = timesheets;
            return this;
        }
        
        /**
         * Build call for invalidateTimesheetById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkflowInvalidateTimesheetByIdRequest workflowInvalidateTimesheetByIdRequest = buildBodyParams();
            return invalidateTimesheetByIdCall(workflowInvalidateTimesheetByIdRequest, _callback);
        }

        private WorkflowInvalidateTimesheetByIdRequest buildBodyParams() {
            WorkflowInvalidateTimesheetByIdRequest workflowInvalidateTimesheetByIdRequest = new WorkflowInvalidateTimesheetByIdRequest();
            workflowInvalidateTimesheetByIdRequest.timesheets(this.timesheets);
            return workflowInvalidateTimesheetByIdRequest;
        }

        /**
         * Execute invalidateTimesheetById request
         * @return WorkflowSendReminderEmailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public WorkflowSendReminderEmailResponse execute() throws ApiException {
            WorkflowInvalidateTimesheetByIdRequest workflowInvalidateTimesheetByIdRequest = buildBodyParams();
            ApiResponse<WorkflowSendReminderEmailResponse> localVarResp = invalidateTimesheetByIdWithHttpInfo(workflowInvalidateTimesheetByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute invalidateTimesheetById request with HTTP info returned
         * @return ApiResponse&lt;WorkflowSendReminderEmailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<WorkflowSendReminderEmailResponse> executeWithHttpInfo() throws ApiException {
            WorkflowInvalidateTimesheetByIdRequest workflowInvalidateTimesheetByIdRequest = buildBodyParams();
            return invalidateTimesheetByIdWithHttpInfo(workflowInvalidateTimesheetByIdRequest);
        }

        /**
         * Execute invalidateTimesheetById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowSendReminderEmailResponse> _callback) throws ApiException {
            WorkflowInvalidateTimesheetByIdRequest workflowInvalidateTimesheetByIdRequest = buildBodyParams();
            return invalidateTimesheetByIdAsync(workflowInvalidateTimesheetByIdRequest, _callback);
        }
    }

    /**
     * Invalidate Timesheets by id
     * &lt;!-- theme: warning --&gt;  &gt;#### Warning &gt; This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1invalidate/post)  Rejects an approved timesheet. Sets its status to &#x60;3&#x60; (rejected). A new timesheet may then be submitted for this User and [StartsOn - EndsOn[.  Comment is mandatory.
     * @return InvalidateTimesheetByIdRequestBuilder
     */
    public InvalidateTimesheetByIdRequestBuilder invalidateTimesheetById() throws IllegalArgumentException {
        return new InvalidateTimesheetByIdRequestBuilder();
    }
    private okhttp3.Call sendReminderEmailCall(WorkflowSendReminderEmailRequest workflowSendReminderEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowSendReminderEmailRequest;

        // create path and map variables
        String localVarPath = "/timmi/services/workflow/remind";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendReminderEmailValidateBeforeCall(WorkflowSendReminderEmailRequest workflowSendReminderEmailRequest, final ApiCallback _callback) throws ApiException {
        return sendReminderEmailCall(workflowSendReminderEmailRequest, _callback);

    }


    private ApiResponse<WorkflowSendReminderEmailResponse> sendReminderEmailWithHttpInfo(WorkflowSendReminderEmailRequest workflowSendReminderEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = sendReminderEmailValidateBeforeCall(workflowSendReminderEmailRequest, null);
        Type localVarReturnType = new TypeToken<WorkflowSendReminderEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendReminderEmailAsync(WorkflowSendReminderEmailRequest workflowSendReminderEmailRequest, final ApiCallback<WorkflowSendReminderEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendReminderEmailValidateBeforeCall(workflowSendReminderEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkflowSendReminderEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendReminderEmailRequestBuilder {
        private List<WorkflowSendReminderEmailRequestTimesheetsInner> timesheets;

        private SendReminderEmailRequestBuilder() {
        }

        /**
         * Set timesheets
         * @param timesheets  (optional)
         * @return SendReminderEmailRequestBuilder
         */
        public SendReminderEmailRequestBuilder timesheets(List<WorkflowSendReminderEmailRequestTimesheetsInner> timesheets) {
            this.timesheets = timesheets;
            return this;
        }
        
        /**
         * Build call for sendReminderEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkflowSendReminderEmailRequest workflowSendReminderEmailRequest = buildBodyParams();
            return sendReminderEmailCall(workflowSendReminderEmailRequest, _callback);
        }

        private WorkflowSendReminderEmailRequest buildBodyParams() {
            WorkflowSendReminderEmailRequest workflowSendReminderEmailRequest = new WorkflowSendReminderEmailRequest();
            workflowSendReminderEmailRequest.timesheets(this.timesheets);
            return workflowSendReminderEmailRequest;
        }

        /**
         * Execute sendReminderEmail request
         * @return WorkflowSendReminderEmailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public WorkflowSendReminderEmailResponse execute() throws ApiException {
            WorkflowSendReminderEmailRequest workflowSendReminderEmailRequest = buildBodyParams();
            ApiResponse<WorkflowSendReminderEmailResponse> localVarResp = sendReminderEmailWithHttpInfo(workflowSendReminderEmailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendReminderEmail request with HTTP info returned
         * @return ApiResponse&lt;WorkflowSendReminderEmailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<WorkflowSendReminderEmailResponse> executeWithHttpInfo() throws ApiException {
            WorkflowSendReminderEmailRequest workflowSendReminderEmailRequest = buildBodyParams();
            return sendReminderEmailWithHttpInfo(workflowSendReminderEmailRequest);
        }

        /**
         * Execute sendReminderEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowSendReminderEmailResponse> _callback) throws ApiException {
            WorkflowSendReminderEmailRequest workflowSendReminderEmailRequest = buildBodyParams();
            return sendReminderEmailAsync(workflowSendReminderEmailRequest, _callback);
        }
    }

    /**
     * Remind Timesheets
     * Remind user of a due timesheet. Sends him/her an email.
     * @return SendReminderEmailRequestBuilder
     */
    public SendReminderEmailRequestBuilder sendReminderEmail() throws IllegalArgumentException {
        return new SendReminderEmailRequestBuilder();
    }
    private okhttp3.Call submitTimesheetCall(WorkflowSubmitTimesheetRequest workflowSubmitTimesheetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowSubmitTimesheetRequest;

        // create path and map variables
        String localVarPath = "/timmi/services/workflow/submit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitTimesheetValidateBeforeCall(WorkflowSubmitTimesheetRequest workflowSubmitTimesheetRequest, final ApiCallback _callback) throws ApiException {
        return submitTimesheetCall(workflowSubmitTimesheetRequest, _callback);

    }


    private ApiResponse<WorkflowSendReminderEmailResponse> submitTimesheetWithHttpInfo(WorkflowSubmitTimesheetRequest workflowSubmitTimesheetRequest) throws ApiException {
        okhttp3.Call localVarCall = submitTimesheetValidateBeforeCall(workflowSubmitTimesheetRequest, null);
        Type localVarReturnType = new TypeToken<WorkflowSendReminderEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitTimesheetAsync(WorkflowSubmitTimesheetRequest workflowSubmitTimesheetRequest, final ApiCallback<WorkflowSendReminderEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitTimesheetValidateBeforeCall(workflowSubmitTimesheetRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkflowSendReminderEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitTimesheetRequestBuilder {
        private List<WorkflowSubmitTimesheetRequestTimesheetsInner> timesheets;

        private SubmitTimesheetRequestBuilder() {
        }

        /**
         * Set timesheets
         * @param timesheets  (optional)
         * @return SubmitTimesheetRequestBuilder
         */
        public SubmitTimesheetRequestBuilder timesheets(List<WorkflowSubmitTimesheetRequestTimesheetsInner> timesheets) {
            this.timesheets = timesheets;
            return this;
        }
        
        /**
         * Build call for submitTimesheet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkflowSubmitTimesheetRequest workflowSubmitTimesheetRequest = buildBodyParams();
            return submitTimesheetCall(workflowSubmitTimesheetRequest, _callback);
        }

        private WorkflowSubmitTimesheetRequest buildBodyParams() {
            WorkflowSubmitTimesheetRequest workflowSubmitTimesheetRequest = new WorkflowSubmitTimesheetRequest();
            workflowSubmitTimesheetRequest.timesheets(this.timesheets);
            return workflowSubmitTimesheetRequest;
        }

        /**
         * Execute submitTimesheet request
         * @return WorkflowSendReminderEmailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public WorkflowSendReminderEmailResponse execute() throws ApiException {
            WorkflowSubmitTimesheetRequest workflowSubmitTimesheetRequest = buildBodyParams();
            ApiResponse<WorkflowSendReminderEmailResponse> localVarResp = submitTimesheetWithHttpInfo(workflowSubmitTimesheetRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitTimesheet request with HTTP info returned
         * @return ApiResponse&lt;WorkflowSendReminderEmailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<WorkflowSendReminderEmailResponse> executeWithHttpInfo() throws ApiException {
            WorkflowSubmitTimesheetRequest workflowSubmitTimesheetRequest = buildBodyParams();
            return submitTimesheetWithHttpInfo(workflowSubmitTimesheetRequest);
        }

        /**
         * Execute submitTimesheet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowSendReminderEmailResponse> _callback) throws ApiException {
            WorkflowSubmitTimesheetRequest workflowSubmitTimesheetRequest = buildBodyParams();
            return submitTimesheetAsync(workflowSubmitTimesheetRequest, _callback);
        }
    }

    /**
     * Submit Timesheets
     * &lt;!-- theme: warning --&gt; &gt; #### Warning &gt; This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1submit/post)  Timesheet is created and its status is set to &#x60;1&#x60; (pending approval). In some cases, timesheet may then be automatically approved (&#x60;status: 2&#x60;), depending on the application settings.  Once submitted, all comprised TimeEntries for user can no longer be modified. In order to be able to modify them, the timesheet must first be rejected through &#x60;cancel&#x60;, &#x60;deny&#x60; or &#x60;invalidate&#x60; operations (depends on the current timesheet status).
     * @return SubmitTimesheetRequestBuilder
     */
    public SubmitTimesheetRequestBuilder submitTimesheet() throws IllegalArgumentException {
        return new SubmitTimesheetRequestBuilder();
    }
}
