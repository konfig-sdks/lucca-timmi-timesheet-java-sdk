/*
 * Timmi Timesheet API
 * Welcome on the documentation for the Timmi Timesheet API. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AxisSection;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.TimeEntriesCreateMultipleResponse;
import com.konfigthis.client.model.TimeEntriesDeleteMultipleRequestInner;
import com.konfigthis.client.model.TimeEntriesGetByIdResponse;
import com.konfigthis.client.model.TimeEntriesListTimeEntriesResponse;
import com.konfigthis.client.model.TimeEntriesUpdateByIdResponse;
import com.konfigthis.client.model.TimeEntriesUpdateMultipleResponse;
import com.konfigthis.client.model.TimeEntry;
import com.konfigthis.client.model.TimeEntryComment;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimeEntriesApi
 */
@Disabled
public class TimeEntriesApiTest {

    private static TimeEntriesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TimeEntriesApi(apiClient);
    }

    /**
     * Create new TimeEntries
     *
     * &lt;!-- theme: warning --&gt;  &gt;#### Warning &gt; This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  You can create a single or multiple TimeEntries for a given user.  Beware, a new TimeEntry cannot intersect with a submitted or approved timesheet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMultipleTest() throws ApiException {
        TimeEntriesCreateMultipleResponse response = api.createMultiple()
                .execute();
        // TODO: test validations
    }

    /**
     * Delete multiple TimeEntries
     *
     * &lt;!-- theme: warning --&gt;  &gt;#### Warning &gt; This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Delete one or several TimeEntries. The \&quot;id\&quot; field of each TimeEntry must be sent and correspond to an existing TimeEntry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMultipleTest() throws ApiException {
        api.deleteMultiple()
                .execute();
        // TODO: test validations
    }

    /**
     * Get a TimeEntry by id
     *
     * Retrieve a single TimeEntry identified by its unique identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        Integer timeEntryId = null;
        TimeEntriesGetByIdResponse response = api.getById(timeEntryId)
                .execute();
        // TODO: test validations
    }

    /**
     * List TimeEntries
     *
     * Retrieve a list of TimeEntries.  The &#x60;startsAt&#x60; query parameter can operate comparisons with a given date-time value: - &#x60;?startsAt&#x3D;2021-01-01&#x60;: strict equality. - &#x60;?startsAt&#x3D;since,2021-01-01&#x60;: greater than or equal. - &#x60;?startsAt&#x3D;until,2021-01-01&#x60;: lower than or equal. - &#x60;?startsAt&#x3D;between,2021-01-01,2021-01-31&#x60;: comprised between two dates.  To retrieve the total count of all TimeEntries (on all pages), please include the field &#x60;?field&#x3D;collection.count&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTimeEntriesTest() throws ApiException {
        String paging = null;
        List<Object> ownerId = null;
        String startsAt = null;
        List<Object> axisSectionsId = null;
        List<Object> axisSectionsCode = null;
        String modifiedAt = null;
        String archivedAt = null;
        TimeEntriesListTimeEntriesResponse response = api.listTimeEntries(paging)
                .ownerId(ownerId)
                .startsAt(startsAt)
                .axisSectionsId(axisSectionsId)
                .axisSectionsCode(axisSectionsCode)
                .modifiedAt(modifiedAt)
                .archivedAt(archivedAt)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a TimeEntry by id
     *
     * &lt;!-- theme: warning --&gt;  &gt;#### Warning &gt; This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Delete a single TimeEntry. Deletion is irrevocable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        Integer timeEntryId = null;
        api.removeById(timeEntryId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a TimeEntry by id
     *
     * &lt;!-- theme: warning --&gt;  &gt;#### Warning &gt; This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Update fields of a single TimeEntry identified by its unique id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByIdTest() throws ApiException {
        OffsetDateTime startsAt = null;
        String duration = null;
        Integer unit = null;
        Integer ownerId = null;
        Integer timeEntryId = null;
        Integer id = null;
        OffsetDateTime endsAt = null;
        Integer authorId = null;
        OffsetDateTime createdAt = null;
        Integer creationSource = null;
        Integer modifierId = null;
        Integer modifiedAt = null;
        Integer layer = null;
        List<AxisSection> axisSections = null;
        TimeEntryComment comment = null;
        Object timeTypeId = null;
        TimeEntriesUpdateByIdResponse response = api.updateById(startsAt, duration, unit, ownerId, timeEntryId)
                .id(id)
                .endsAt(endsAt)
                .authorId(authorId)
                .createdAt(createdAt)
                .creationSource(creationSource)
                .modifierId(modifierId)
                .modifiedAt(modifiedAt)
                .layer(layer)
                .axisSections(axisSections)
                .comment(comment)
                .timeTypeId(timeTypeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update multiple TimeEntries
     *
     * &lt;!-- theme: warning --&gt;  &gt;#### Warning &gt; This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Update one or several TimeEntries. The \&quot;id\&quot; field must be sent and correspond to an existing TimeEntry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMultipleTest() throws ApiException {
        TimeEntriesUpdateMultipleResponse response = api.updateMultiple()
                .execute();
        // TODO: test validations
    }

}
